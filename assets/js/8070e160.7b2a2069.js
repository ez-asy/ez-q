"use strict";(self.webpackChunkez_q_docs=self.webpackChunkez_q_docs||[]).push([[651],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),l=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=l(n),d=r,h=m["".concat(u,".").concat(d)]||m[d]||p[d]||s;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2257:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var a=n(7462),r=n(3366),s=(n(7294),n(3905)),i=["components"],o={sidebar_position:1},u="Quickstart",l={unversionedId:"quickstart",id:"quickstart",title:"Quickstart",description:"We will first look how to get a basic ez-q instance up and running.",source:"@site/docs/quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/ez-q/docs/quickstart",draft:!1,editUrl:"https://github.com/ez-asy/ez-q-docs/docs/quickstart.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Get Queues",permalink:"/ez-q/docs/api-reference/queue-endpoints/get-queues"}},c={},p=[{value:"Start up <code>ez-q</code>",id:"start-up-ez-q",level:2},{value:"...with Docker",id:"with-docker",level:3},{value:"...with Cargo",id:"with-cargo",level:3},{value:"Your first message",id:"your-first-message",level:2},{value:"Publish a message",id:"publish-a-message",level:3},{value:"Pull a message",id:"pull-a-message",level:3},{value:"Complete a message",id:"complete-a-message",level:3}],m={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"quickstart"},"Quickstart"),(0,s.kt)("p",null,"We will first look how to get a basic ",(0,s.kt)("inlineCode",{parentName:"p"},"ez-q")," instance up and running. "),(0,s.kt)("h2",{id:"start-up-ez-q"},"Start up ",(0,s.kt)("inlineCode",{parentName:"h2"},"ez-q")),(0,s.kt)("p",null,"These will start up a usable ",(0,s.kt)("inlineCode",{parentName:"p"},"ez-q")," which assumes you have a redis instance running on ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost:6379"),", if you don't, first start one with:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 6379:6379 -d redis\n")),(0,s.kt)("p",null,"Now we are ready lets run ",(0,s.kt)("inlineCode",{parentName:"p"},"ez-q"),"..."),(0,s.kt)("h3",{id:"with-docker"},"...with Docker"),(0,s.kt)("p",null,"This is the quickest way to get an ",(0,s.kt)("inlineCode",{parentName:"p"},"ez-q")," instance up and running. To start an instance, run the command: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'docker run -p 8080:8080 -e "REDIS_URL=redis://host.docker.internal:6379" ezasy/ez-q:0.0.1-alpha.2\n')),(0,s.kt)("h3",{id:"with-cargo"},"...with Cargo"),(0,s.kt)("p",null,"You may also wish to just install the project as a usable binary from cargo."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# first install\ncargo install ez-q --version 0.0.1-alpha.2\n\n# then run it\nez-q\n")),(0,s.kt)("h2",{id:"your-first-message"},"Your first message"),(0,s.kt)("p",null,"Now we have a ",(0,s.kt)("inlineCode",{parentName:"p"},"eq-q")," running we can publish a message and consume it. "),(0,s.kt)("h3",{id:"publish-a-message"},"Publish a message"),(0,s.kt)("p",null,"An ",(0,s.kt)("inlineCode",{parentName:"p"},"ez-q")," message can be pushed to the ",(0,s.kt)("a",{parentName:"p",href:"api-reference/queue-endpoints/publish-message"},"publish message")," endpoint. This endpoint is shaped like ",(0,s.kt)("inlineCode",{parentName:"p"},"/queue/${queue_name}/message/")," where the ",(0,s.kt)("inlineCode",{parentName:"p"},"queue_name"),' is the name of the queue you wish to push to, a new queue is created if one does not yet exist. The body must be JSON with a key "content" which can have a value of any valid JSON.'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl --location --request POST \'http://localhost:8080/queues/my_first_queue/message\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    "content": {\n        "key": {\n            "nested": "test"\n        }\n    }\n}\'\n\n# {\n#   "id": message_uuid \n# }\n')),(0,s.kt)("h3",{id:"pull-a-message"},"Pull a message"),(0,s.kt)("p",null,"Now we have a message published we can start to process it by pulling it from the queue we pushed it to using the ",(0,s.kt)("a",{parentName:"p",href:"api-reference/queue-endpoints/get-message"},"get message")," endpoint."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl --location --request GET \'http://localhost:8080/queues/my_first_queue/message\' \\\n--header \'Content-Type: application/json\'\n\n# {\n#   "id": message_uuid \n#   "content": {\n#     "key": {\n#       "nested": "test"\n#     }\n#   }\n# }\n')),(0,s.kt)("h3",{id:"complete-a-message"},"Complete a message"),(0,s.kt)("p",null,"Now once you have finished processing a message, you must let ",(0,s.kt)("inlineCode",{parentName:"p"},"ez-q")," know it has finished (and the state it finished with) by making one final call. Assuming a message is successful, you can use the ",(0,s.kt)("a",{parentName:"p",href:"api-reference/message-endpoints/complete-message"},"get message")," as follows."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl --location --request GET 'http://localhost:8080/messages/{message_uuid}/complete'\n\n# {\n#   \"id\": message_uuid \n# }\n")),(0,s.kt)("p",null,"Similarly for a failed message you can use, "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl --location --request GET 'http://localhost:8080/messages/{message_uuid}/fail'\n\n# {\n#   \"id\": message_uuid \n# }\n")))}d.isMDXComponent=!0}}]);